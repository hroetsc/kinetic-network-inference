- Project '~/kinetic-network-inference' loaded. [renv 1.0.5]
- The project is out-of-sync -- use `renv::status()` for details.
28Ptmux;]1337;ReportCellSize\GKS: cannot open display - headless operation mode active
  569.446 Î¼s (3341 allocations: 790.11 KiB)
Sampling (3 threads)   0%|                              |  ETA: N/A
Sampling (3 threads)  33%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ                    |  ETA: 0:59:05
Sampling (3 threads)  67%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ          |  ETA: 0:14:54
Sampling (3 threads) 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| Time: 0:29:56
Sampling (3 threads) 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| Time: 0:29:57
1799.267332 seconds (1.57 G allocations: 314.767 GiB, 87.72% gc time, 3.49% compilation time: <1% of which was recompilation)
saving chain and summary statsplotting chain...ERROR: LoadError: boundary (a,b) must have a < b
Stacktrace:
  [1] error(s::String)
    @ Base ./error.jl:35
  [2] kde_range
    @ ~/.julia/packages/KernelDensity/XQr1u/src/univariate.jl:83 [inlined]
  [3] #kde#1
    @ ~/.julia/packages/KernelDensity/XQr1u/src/univariate.jl:158 [inlined]
  [4] kde(data::AxisArrays.AxisVector{Float64, Vector{Float64}, Tuple{AxisArrays.Axis{:iter, StepRange{Int64, Int64}}}}; bandwidth::Float64, kernel::Type, npoints::Int64, boundary::Tuple{Float64, Float64}, weights::KernelDensity.UniformWeights{100000})
    @ KernelDensity ~/.julia/packages/KernelDensity/XQr1u/src/univariate.jl:173
  [5] #violin_coords#98
    @ ~/.julia/packages/StatsPlots/cStOe/src/violin.jl:13 [inlined]
  [6] macro expansion
    @ ~/.julia/packages/StatsPlots/cStOe/src/hist.jl:13 [inlined]
  [7] apply_recipe(plotattributes::AbstractDict{Symbol, Any}, ::Type{Val{:density}}, x::Any, y::Any, z::Any)
    @ StatsPlots ~/.julia/packages/RecipesBase/BRe07/src/RecipesBase.jl:300
  [8] _process_seriesrecipe(plt::Any, plotattributes::Any)
    @ RecipesPipeline ~/.julia/packages/RecipesPipeline/BGM3l/src/series_recipe.jl:50
  [9] _process_seriesrecipes!(plt::Any, kw_list::Any)
    @ RecipesPipeline ~/.julia/packages/RecipesPipeline/BGM3l/src/series_recipe.jl:27
 [10] recipe_pipeline!(plt::Any, plotattributes::Any, args::Any)
    @ RecipesPipeline ~/.julia/packages/RecipesPipeline/BGM3l/src/RecipesPipeline.jl:99
 [11] _plot!(plt::Plots.Plot, plotattributes::Any, args::Any)
    @ Plots ~/.julia/packages/Plots/ju9dp/src/plot.jl:223
 [12] plot(args::Any; kw...)
    @ Plots ~/.julia/packages/Plots/ju9dp/src/plot.jl:102
 [13] density(args::Any; kw...)
    @ Plots ~/.julia/packages/RecipesBase/BRe07/src/RecipesBase.jl:427
 [14] plot_chains_sim(myChains::Chains{Float64, AxisArrays.AxisArray{Float64, 3, Array{Float64, 3}, Tuple{AxisArrays.Axis{:iter, StepRange{Int64, Int64}}, AxisArrays.Axis{:var, Vector{Symbol}}, AxisArrays.Axis{:chain, UnitRange{Int64}}}}, Missing, @NamedTuple{parameters::Vector{Symbol}, internals::Vector{Symbol}}, @NamedTuple{varname_to_symbol::OrderedCollections.OrderedDict{AbstractPPL.VarName, Symbol}, model::DynamicPPL.Model{typeof(likelihood), (:Xv, :problem, :x0, :Î±_sigma, :Î¸_sigma, :Î±_k, :Î¸_k), (), (), Tuple{SVector{52, Float64}, ODEProblem{MVector{13, Float64}, Tuple{Float64, Float64}, true, MVector{7, Float64}, ODEFunction{true, SciMLBase.AutoSpecialize, typeof(massaction_stable), UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing, Nothing, Nothing, Nothing}, @Kwargs{}, SciMLBase.StandardODEProblem}, MVector{13, Float64}, Int64, Int64, Float64, Int64}, Tuple{}, DynamicPPL.DefaultContext}, sampler::DynamicPPL.Sampler{SMC{(), AdvancedPS.ResampleWithESSThreshold{typeof(AdvancedPS.resample_systematic), Float64}}}, samplerstate::Turing.Inference.SMCState{AdvancedPS.ParticleContainer{AdvancedPS.Trace{AdvancedPS.LibtaskModel{Turing.Essential.TracedModel{AbstractMCMC.AbstractSampler, DynamicPPL.AbstractVarInfo, DynamicPPL.Model, Tuple}, TapedTask{typeof(likelihood), Tuple{DynamicPPL.Model{typeof(likelihood), (:Xv, :problem, :x0, :Î±_sigma, :Î¸_sigma, :Î±_k, :Î¸_k), (), (), Tuple{SVector{52, Float64}, ODEProblem{MVector{13, Float64}, Tuple{Float64, Float64}, true, MVector{7, Float64}, ODEFunction{true, SciMLBase.AutoSpecialize, typeof(massaction_stable), UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing, Nothing, Nothing, Nothing}, @Kwargs{}, SciMLBase.StandardODEProblem}, MVector{13, Float64}, Int64, Int64, Float64, Int64}, Tuple{}, DynamicPPL.DefaultContext}, DynamicPPL.TypedVarInfo{@NamedTuple{Î£::DynamicPPL.Metadata{Dict{AbstractPPL.VarName{:Î£, Setfield.IdentityLens}, Int64}, Vector{Gamma{Float64}}, Vector{AbstractPPL.VarName{:Î£, Setfield.IdentityLens}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, k::DynamicPPL.Metadata{Dict{AbstractPPL.VarName{:k, Setfield.IdentityLens}, Int64}, Vector{Product{Continuous, Uniform{Float64}, Vector{Uniform{Float64}}}}, Vector{AbstractPPL.VarName{:k, Setfield.IdentityLens}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}, Float64}, DynamicPPL.SamplingContext{DynamicPPL.Sampler{SMC{(), AdvancedPS.ResampleWithESSThreshold{typeof(AdvancedPS.resample_systematic), Float64}}}, DynamicPPL.DefaultContext, AdvancedPS.TracedRNG{UInt64, 1, Random123.Philox2x{UInt64, 10}}}, SVector{52, Float64}, ODEProblem{MVector{13, Float64}, Tuple{Float64, Float64}, true, MVector{7, Float64}, ODEFunction{true, SciMLBase.AutoSpecialize, typeof(massaction_stable), UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing, Nothing, Nothing, Nothing}, @Kwargs{}, SciMLBase.StandardODEProblem}, MVector{13, Float64}, Int64, Int64, Float64, Int64}}}, AdvancedPS.TracedRNG{UInt64, 1, Random123.Philox2x{UInt64, 10}}}, AdvancedPS.TracedRNG{UInt64, 1, Random123.Philox2x{UInt64, 10}}}, Float64}, start_time::Vector{Float64}, stop_time::Vector{Float64}}})
    @ Main ~/kinetic-network-inference/src/_plot_utils.jl:120
 [15] diagnostics_and_save_sim(myChains::Chains{Float64, AxisArrays.AxisArray{Float64, 3, Array{Float64, 3}, Tuple{AxisArrays.Axis{:iter, StepRange{Int64, Int64}}, AxisArrays.Axis{:var, Vector{Symbol}}, AxisArrays.Axis{:chain, UnitRange{Int64}}}}, Missing, @NamedTuple{parameters::Vector{Symbol}, internals::Vector{Symbol}}, @NamedTuple{varname_to_symbol::OrderedCollections.OrderedDict{AbstractPPL.VarName, Symbol}, model::DynamicPPL.Model{typeof(likelihood), (:Xv, :problem, :x0, :Î±_sigma, :Î¸_sigma, :Î±_k, :Î¸_k), (), (), Tuple{SVector{52, Float64}, ODEProblem{MVector{13, Float64}, Tuple{Float64, Float64}, true, MVector{7, Float64}, ODEFunction{true, SciMLBase.AutoSpecialize, typeof(massaction_stable), UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing, Nothing, Nothing, Nothing}, @Kwargs{}, SciMLBase.StandardODEProblem}, MVector{13, Float64}, Int64, Int64, Float64, Int64}, Tuple{}, DynamicPPL.DefaultContext}, sampler::DynamicPPL.Sampler{SMC{(), AdvancedPS.ResampleWithESSThreshold{typeof(AdvancedPS.resample_systematic), Float64}}}, samplerstate::Turing.Inference.SMCState{AdvancedPS.ParticleContainer{AdvancedPS.Trace{AdvancedPS.LibtaskModel{Turing.Essential.TracedModel{AbstractMCMC.AbstractSampler, DynamicPPL.AbstractVarInfo, DynamicPPL.Model, Tuple}, TapedTask{typeof(likelihood), Tuple{DynamicPPL.Model{typeof(likelihood), (:Xv, :problem, :x0, :Î±_sigma, :Î¸_sigma, :Î±_k, :Î¸_k), (), (), Tuple{SVector{52, Float64}, ODEProblem{MVector{13, Float64}, Tuple{Float64, Float64}, true, MVector{7, Float64}, ODEFunction{true, SciMLBase.AutoSpecialize, typeof(massaction_stable), UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing, Nothing, Nothing, Nothing}, @Kwargs{}, SciMLBase.StandardODEProblem}, MVector{13, Float64}, Int64, Int64, Float64, Int64}, Tuple{}, DynamicPPL.DefaultContext}, DynamicPPL.TypedVarInfo{@NamedTuple{Î£::DynamicPPL.Metadata{Dict{AbstractPPL.VarName{:Î£, Setfield.IdentityLens}, Int64}, Vector{Gamma{Float64}}, Vector{AbstractPPL.VarName{:Î£, Setfield.IdentityLens}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}, k::DynamicPPL.Metadata{Dict{AbstractPPL.VarName{:k, Setfield.IdentityLens}, Int64}, Vector{Product{Continuous, Uniform{Float64}, Vector{Uniform{Float64}}}}, Vector{AbstractPPL.VarName{:k, Setfield.IdentityLens}}, Vector{Float64}, Vector{Set{DynamicPPL.Selector}}}}, Float64}, DynamicPPL.SamplingContext{DynamicPPL.Sampler{SMC{(), AdvancedPS.ResampleWithESSThreshold{typeof(AdvancedPS.resample_systematic), Float64}}}, DynamicPPL.DefaultContext, AdvancedPS.TracedRNG{UInt64, 1, Random123.Philox2x{UInt64, 10}}}, SVector{52, Float64}, ODEProblem{MVector{13, Float64}, Tuple{Float64, Float64}, true, MVector{7, Float64}, ODEFunction{true, SciMLBase.AutoSpecialize, typeof(massaction_stable), UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing, Nothing, Nothing, Nothing}, @Kwargs{}, SciMLBase.StandardODEProblem}, MVector{13, Float64}, Int64, Int64, Float64, Int64}}}, AdvancedPS.TracedRNG{UInt64, 1, Random123.Philox2x{UInt64, 10}}}, AdvancedPS.TracedRNG{UInt64, 1, Random123.Philox2x{UInt64, 10}}}, Float64}, start_time::Vector{Float64}, stop_time::Vector{Float64}}}, problem::ODEProblem{MVector{13, Float64}, Tuple{Float64, Float64}, true, MVector{7, Float64}, ODEFunction{true, SciMLBase.AutoSpecialize, typeof(massaction_stable), UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing, Nothing, Nothing, Nothing}, @Kwargs{}, SciMLBase.StandardODEProblem})
    @ Main ~/kinetic-network-inference/src/_plot_utils.jl:52
 [16] top-level scope
    @ ~/kinetic-network-inference/src/inference_insilico.jl:156
in expression starting at /home/hroetsc/kinetic-network-inference/src/inference_insilico.jl:156
